#!/usr/bin/env python

"""
Supporting functions used by assets and status dashboard (for alerts and alarms).
"""
__author__ = 'Edna Donoughe'

from flask import current_app
import requests
import requests.exceptions
from requests.exceptions import ConnectionError, Timeout
import json


### ---------------------------------------------------------------------------
### The following functions are utilities.
### ---------------------------------------------------------------------------
def _compile_asset_rds():
    """ Retrieve asset_ids from uframe for all reference designators referenced in /sensor/inv/toc structure;
    return dictionary with key of asset_id. On error, log and raise exception.
    Note:
        - All reference designators are determined from toc structure and not just what /sensor/inv/toc provides.
        - The original toc response format was a list of dicts; the more recent (May 2016) toc format is a dict.
        - This function has been updated to handle both the original toc list format and newer toc dict format.
    """
    result = {}
    try:
        # Get contents of /sensor/inv/toc
        toc = get_toc_information()

        # If toc is of type dict, then processing newer style toc format
        if isinstance(toc, dict):
            message = 'Using new TOC structure.'
            current_app.logger.info(message)
            if 'instruments' not in toc:
                message = 'TOC does not have attribute \'instruments\', unable to process for reference designators.'
                raise Exception(message)

            # Verify toc attribute 'instruments' is not None or empty, if so, raise Exception.
            toc = toc['instruments']
            if not toc or toc is None:
                message = 'TOC attribute \'instruments\' is None or empty, unable to process for reference designators.'
                raise Exception(message)

        # Process toc to get lists of:
        # (1) reference designators (generated by accumulation),
        # (2) actual reference designators called out in each element of toc response,
        # (3)list of differences
        uframe_url, timeout, timeout_read = get_uframe_assets_info()
        reference_designators, toc_only, difference = process_toc_information_reference_designators(toc)
        if not reference_designators:
            message = 'No reference_designators identified when processing toc information.'
            raise Exception(message)

        #print '\n debug ***** Number of reference designators from toc: ', len(reference_designators)
        if reference_designators and toc_only:
            for rd in reference_designators:
                if rd:
                    try:
                        ids = get_asset_id_by_reference_designator(rd, uframe_url, timeout, timeout_read)
                    except Exception as err:
                        message = 'Exception raised in get_asset_id_by_reference_designator: %s' % err.message
                        raise Exception(message)
                    if ids:
                        ids.sort()
                        for id in ids:
                            if id not in result:
                                result[id] = rd

        list_of_ids = []
        if result:
            list_of_ids = result.keys()
            if list_of_ids:
                list_of_ids.sort()
        return result, list_of_ids

    except ConnectionError:
        message = 'ConnectionError for _compile_asset_rds'
        current_app.logger.info(message)
        return {}, []
    except Timeout:
        message = 'Timeout for _compile_asset_rds'
        current_app.logger.info(message)
        return {}, []
    except Exception as err:
        message = err.message
        current_app.logger.info(message)
        return {}, []


def get_toc_information():
    """ Get uframe /sensor/inv/toc. If exception, log error and return empty list.
    """
    try:
        url, timeout, timeout_read = get_uframe_toc_url()
        response = requests.get(url, timeout=(timeout, timeout_read))
        if response.status_code == 200:
            toc = response.json()
        else:
            message = 'Failure to retrieve toc using url: ', url
            raise Exception(message)
        if toc is not None:
            result = toc
        else:
            message = 'toc returned as None: ', url
            raise Exception(message)
        return result

    except ConnectionError:
        message = 'ConnectionError for get_toc_information'
        current_app.logger.info(message)
        raise Exception(message)
    except Timeout:
        message = 'Timeout for get_toc_information'
        current_app.logger.info(message)
        raise Exception(message)
    except Exception as err:
        current_app.logger.info(err.message)
        return []


def get_uframe_toc_url():
    """ Get uframe url for toc from configuration file; raise exception if not found.
    """
    try:
        uframe_url = current_app.config['UFRAME_URL'] + current_app.config['UFRAME_TOC']
        timeout_connect = current_app.config['UFRAME_TIMEOUT_CONNECT']
        timeout_read = current_app.config['UFRAME_TIMEOUT_READ']
        return uframe_url, timeout_connect, timeout_read
    except:
        message = 'Unable to locate UFRAME_URL or UFRAME_TOC value in configuration file.'
        current_app.logger.info(message)
        raise Exception(message)


def get_uframe_assets_info():
    """ Get uframe assets configuration information.
    """
    try:
        uframe_url = current_app.config['UFRAME_ASSETS_URL']
        timeout = current_app.config['UFRAME_TIMEOUT_CONNECT']
        timeout_read = current_app.config['UFRAME_TIMEOUT_READ']
        return uframe_url, timeout, timeout_read
    except:
        message = 'Unable to locate UFRAME_ASSETS_URL, UFRAME_TIMEOUT_CONNECT or UFRAME_TIMEOUT_READ in config file.'
        current_app.logger.info(message)
        raise Exception(message)


def get_assets_dict_from_list(assets_list):
    """ From list of (ooi-ui-services versioned) list of assets, create assets dictionary by (key) id.
    """
    result = {}
    if assets_list:
        for item in assets_list:
            if 'id' in item:
                if item['id'] not in result:
                    result[item['id']] = item
    return result


def process_toc_information_reference_designators(toc):
    """
    Get list of unique reference designators in /sensor/inv/toc; sorted ascending.
    If error log exception and return []. Includes all stream methods.
    Response output:
    {
      "reference_designators": [
        "CE01ISSP",                             # platform code
        "CE01ISSP-SP001",                       # platform code + mooring code
        "CE01ISSP-SP001-05-VELPTJ000",          # platform code + mooring code + instrument code
        "CE01ISSP-SP001-07-SPKIRJ000",
        "CE01ISSP-SP001-08-FLORTJ000",
        "CE01ISSP-SP001-09-CTDPFJ000",
        "CE01ISSP-SP001-10-PARADJ000",
        "CE01ISSP-XX001",
        "CE01ISSP-XX001-01-CTDPFJ999",
        "CE01ISSP-XX001-01CTDPFJ999",
        "CE01ISSP-XX099",
        "CE01ISSP-XX099-01-CTDPFJ999",
        "CE02SHBP",
        "CE02SHBP-LJ01D",
        . . .
        ]
    }
    """
    result = []
    rds = []
    try:
        if toc is None or not toc:
            message = 'toc is None or empty.'
            raise Exception(message)

        for item in toc:
            if item['reference_designator'] not in rds:
                rds.append(item['reference_designator'])                # format 'CP02PMCO-SBS01-00-RTE000000'

            platform_code = item['platform_code']                       # format 'CP02PMCO'
            if platform_code not in result:
                result.append(platform_code)

            mooring_code = item['mooring_code']                         # format 'SBS01', used with platform code
            instrument_code = item['instrument_code']

            _platform_code = "-".join([platform_code, mooring_code])    # format CP02PMCO-SBS01
            if _platform_code not in result:
                result.append(_platform_code)
            _instrument_code = "-".join([platform_code, mooring_code, instrument_code ])  #'CP02PMCO-SBS01-00-RTE000000'
            if _instrument_code not in result:
                result.append(_instrument_code)

        if rds:
            rds.sort()
        if result:
            result.sort()

        # Reviewing data from toc to see what we have and don't have...
        # Which items in result were not provided in rds?
        ommitted_reference_designators = []
        for item in result:
            if item not in rds:
                if item not in ommitted_reference_designators:
                    ommitted_reference_designators.append(item)
        if ommitted_reference_designators:
            ommitted_reference_designators.sort()

        """
        In brief, the 'reference_designators' provided in the /sensor/toc response, are less than the
        hierarchical structure (ui toc) count which would be generated to support those instruments.
        Namely, the difference being the list of omitted_reference_designators (47) shown above.
        """
        return result, rds, ommitted_reference_designators

    except Exception as err:
        current_app.logger.info(err.message)
        return [], [], []


# todo discuss and/or prevent assets from being created which do not have actual sensor/inv relationship.
def get_asset_id_by_reference_designator(rd, uframe_url=None, timeout=None, timeout_read=None):
    """ Get asset_ids in uframe by reference designator; return list of asset ids; On error return [].

    Note: During asset creation, through the UI, reference designators which do not represent an
    inventory item (12576/sensor/inv) are permitted. Recommend these assets be flagged as 'proposed' as all
    approved assets shall relate to an actual inventory component in the system.
    """
    info = False
    debug = False
    ids = []
    try:
        if not rd or rd is None:
            return []

        if uframe_url is None:
            uframe_url, timeout, timeout_read = get_uframe_assets_info()

        # Get reference designator components (mooring, platform, instrument) and form url
        len_rd = len(rd)
        url_root = "/".join([uframe_url, 'assets', 'byReferenceDesignator'])
        if len_rd == 27 and ('-' in rd):
            mooring, platform, instrument = rd.split('-', 2)
            url = "/".join([url_root, mooring, platform, instrument])
        elif len_rd == 14 and ('-' in rd):
            mooring, platform = rd.split('-')
            url = "/".join([url_root, mooring, platform])
        elif len_rd == 8:   # and ('-' not in rd):
            url = "/".join([url_root, rd])
        else:
            message = 'Malformed reference designator: %s' % rd
            current_app.logger.info(message)
            return []

        # Query uframe for reference designator asset ids.
        if debug: print '\n debug --- url: ', url
        response = requests.get(url, timeout=(timeout, timeout_read))
        if response.status_code != 200:
            if info:
                message = '(%d) Failed to get uframe asset id for reference designator: %s' % (response.status_code,rd)
                current_app.logger.info(message)
            return []
        try:
            result = json.loads(response.content)
            if not result:
                return []
        except Exception as err:
            message = 'Invalid json; failed to get_asset_id_by_reference_designator: %s' % err.message
            if debug: print '\n debug -- message: ', message
            current_app.logger.info(message)
            return []

        # If result returned, process for ids
        if result:
            for asset in result:
                if 'assetId' in asset:
                    if asset['assetId']:
                        if asset['assetId'] not in ids:
                            ids.append(asset['assetId'])
        if ids:
            ids.sort(reverse=True)
        return ids

    except ConnectionError:
        message = 'ConnectionError for get_asset_id_by_reference_designator'
        current_app.logger.info(message)
        raise Exception(message)
    except Timeout:
        message = 'Timeout for get_asset_id_by_reference_designator'
        current_app.logger.info(message)
        raise Exception(message)
    except Exception as err:
        message = '[get_asset_id_by_reference_designator] exception: ', str(err)
        current_app.logger.info(message)
        return []